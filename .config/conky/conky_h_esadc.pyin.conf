-- vim: ts=4 sw=4 noet ai cindent syntax=lua
--[[
Conky, a system monitor, based on torsmo

Any original torsmo code is licensed under the BSD license

All code written since the fork of torsmo is licensed under the GPL

Please see COPYING for details

Copyright (c) 2004, Hannu Saransaari and Lauri Hakkarainen
Copyright (c) 2005-2012 Brenden Matthews, Philip Kovacs, et. al. (see AUTHORS)
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
]]

--[[ def pystart():
    import sys
    sys.path.insert(1,"/var/src/conkyconfpy")
    from conkyconfpy import *
    kvp=ConfigSection    (
                        ConfigItem('color0'                 ,   '#00aaff' ),
                        ConfigItem('color1'                 ,   '#222222' ),
                        ConfigItem('color2'                 ,   '#555555' ),
                        ConfigItem('color3'                 ,   '#b080a0' ),
                        ConfigItem('color4'                 ,   '#ff00aa' ),
                        ConfigItem('default_color'          ,   'white'   ),
                        ConfigItem('default_outline_color'  ,   'white'   ),
                        ConfigItem('default_shade_color'    ,   'green'   ),
                        ConfigItem('border_inner_margin'    ,   0         ),
                        ConfigItem('border_outer_margin'    ,   0         ),
                        ConfigItem('border_width'           ,   0         ),
                        ConfigItem('background'             ,   False     ),
                        ConfigItem('border_width'           ,   0         ),
                        ConfigItem('default_graph_width'    ,   1080      ),
                        ConfigItem('default_graph_height'   ,   40        ),
                        ConfigItem('cpu_avg_samples'        ,   1         ),
                        ConfigItem('net_avg_samples'        ,   3         ),
                        ConfigItem('diskio_avg_samples'     ,   1         ),
                        ConfigItem('draw_borders'           ,   False     ),
                        ConfigItem('draw_graph_borders'     ,   True      ),
                        ConfigItem('draw_outline'           ,   False     ),
                        ConfigItem('draw_shades'            ,   False     ),
                        ConfigItem('use_xft'                ,   True      ),
                        ConfigItem('font'                   ,   'Anonymous Pro:size=14:antialias=true:autohint=true'),
                        ConfigItem('minimum_height'         ,   2         ),
                        ConfigItem('minimum_width'          ,   2         ),
                        ConfigItem('no_buffers'             ,   True      ),
                        ConfigItem('out_to_console'         ,   False     ),
                        ConfigItem('out_to_stderr'          ,   False     ),
                        ConfigItem('extra_newline'          ,   False     ),
                        ConfigItem('own_window'             ,   True      ),
                        ConfigItem('top_name_width'         ,   8         ),
                        ConfigItem('own_window_type'        ,   'panel'   ),
                        ConfigItem('own_window_class'       ,   'conky'   ),
                        ConfigItem('own_window_title'       ,   'conky_h' ),
                        ConfigItem('double_buffer'          ,   True      ),
                        ConfigItem('own_window_argb_visual' ,   False     ),
                        ConfigItem('own_window_transparent' ,   False     ),
                        ConfigItem('short_units'            ,   True      ),
                        ConfigItem('stippled_borders'       ,   0         ),
                        ConfigItem('update_interval'        ,   2         ),
                        ConfigItem('uppercase'              ,   False     ),
                        ConfigItem('use_spacer'             ,   'none'    ),
                        ConfigItem('show_graph_scale'       ,   False     ),
                        ConfigItem('show_graph_range'       ,   False     ),
                        )
    c=kvp.get_code()
pyend ]]


--[[ def pystart():
    import sys
    sys.path.insert(1,"/var/src/conkyconfpy")
    from conkyconfpy import *
    f0=f('Hack Nerd Font',15,antialias="true",autohint="true")
    f1=f('Hack Nerd Font',12,antialias="true",autohint="true")
    f3=f('Hack Nerd Font',17,antialias="true",autohint="true")
    #f0=f('Anonymous Pro',15,antialias="true",autohint="true")
    #f1=f('Anonymous Pro',12,antialias="true",autohint="true")
    c0=v(color='#00ff00')
    c1=v(color='#bb00ff')
    c2=v(color='#00ffff')
    cg=v(color="green")
    c3=v(color="#005555")
    c4=v(color="#555555")
    from os import cpu_count
    kvp=TextSection    (
                          LL(
                              L    (
                                   f0,c0,v('nodename_short'),
                                   c1,k(" @ "),
                                   c2,L(*[v(freq=i) for i in range(1,cpu_count()+1)]),k(" Mhz")
                                   ),
                              L (vo(5),c2,f0,v(time="%a %e %b %k:%M")),
                            ),
                          RO(320,-46,
                                        L(k('${if_match ${to_bytes ${memfree}} > 536870912}${if_match ${to_bytes ${memfree}} > 1073741824}${color0}${else}${color cyan}${endif}${else}${color green}${endif}${memfree} ')),
                                        L(k('${if_match ${to_bytes ${memeasyfree}} > 1073741824}${if_match ${to_bytes ${memeasyfree}} > 2147483648}${color green}${else}${color orange}${endif}${else}${color red}${endif}${memeasyfree} ')),
                                        L(k('${if_match ${to_bytes ${swapfree}} > 2147483648}${if_match ${to_bytes ${swapfree}} > 4294967296}${color green}${else}${color orange}${endif}${else}${color red}${endif}${swap} ')),

                            ),
                          RO(400,-63,
                                          L(cg,k('${if_match ${loadavg 1} < 16.0}${if_match ${loadavg 1} < 8.0}${color green}${else}${color orange}${endif}${else}${color red}${endif}${loadavg 1}')),
                                          L(cg,k('${if_match ${loadavg 2} < 16.0}${if_match ${loadavg 2} < 8.0}${color green}${else}${color orange}${endif}${else}${color red}${endif}${loadavg 2}')),
                                          L(cg,k('${if_match ${loadavg 3} < 16.0}${if_match ${loadavg 3} < 8.0}${color green}${else}${color orange}${endif}${else}${color red}${endif}${loadavg 3}')),
                            ),
                          RO(450,-63,
                                          L(c2,k('wlp6s0')),
                                        L(k('${if_match ${to_bytes ${upspeedf wlp6s0}} < 94371840}${if_match ${to_bytes ${upspeedf wlp6s0}} < 62914560}${color green}${else}${color orange}${endif}${else}${color red}${endif}${upspeed wlp6s0} ')),
                                        L(k('${if_match ${to_bytes ${downspeedf wlp6s0}} < 94371840}${if_match ${to_bytes ${downspeedf wlp6s0}} < 62914560}${color green}${else}${color orange}${endif}${else}${color red}${endif}${downspeed wlp6s0} ')),
                            ),
                          RO(520,-65,
                                          L(c2,k('enp5s0')),
                                        L(c3,k('${if_match ${to_bytes ${upspeedf enp5s0}} < 94371840}${if_match ${to_bytes ${upspeedf enp5s0}} < 62914560}${color green}${else}${color orange}${endif}${else}${color red}${endif}${upspeed enp5s0} ')),
                                        L(c3,k('${if_match ${to_bytes ${downspeedf enp5s0}} < 94371840}${if_match ${to_bytes ${downspeedf enp5s0}} < 62914560}${color green}${else}${color orange}${endif}${else}${color red}${endif}${downspeed enp5s0} ')),
                            ),
                          RO(600,-65,
                                          L(c2,k('enp3s0u3')),
                                        L(c3,k('${if_match ${to_bytes ${upspeedf enp3s0u3}} < 94371840}${if_match ${to_bytes ${upspeedf enp3s0u3}} < 62914560}${color green}${else}${color orange}${endif}${else}${color red}${endif}${upspeed enp3s0u3} ')),
                                        L(c3,k('${if_match ${to_bytes ${downspeedf enp3s0u3}} < 94371840}${if_match ${to_bytes ${downspeedf enp3s0u3}} < 62914560}${color green}${else}${color orange}${endif}${else}${color red}${endif}${downspeed enp3s0u3} ')),
                            ),
                          RO(700,-60,
                                        L(c4,k('${if_match ${to_bytes ${fs_free /}} > 26843545600}${if_match ${to_bytes ${fs_free /}} > 53687091200}${color green}${else}${color orange}${endif}${else}${color red}${endif}${fs_free /}')),
                            ),
                          RO(780,-20,
                                        L(f1,c2,v("diskio sda")),
                                        L(f1,c2,v("diskio sdb")),
                                        L(f1,c2,v("diskio sdc")),
                                        L(f1,c2,v("diskio sdd")),
                            ),
                          RO(920,-60,
                                        L(f3,c2,k('Mail=${if_match ${tail ~/.recent_unread_mailcount 1 20} > 0}${color3}${tail ~/.recent_unread_mailcount 1 18}N${else}${color green}${tail ~/.recent_unread_mailcount 1 20}${endif}')),
                            ),
#                         k("\n"),
#                          RO(670,-40,
#                             L(c2,v(top=["name",1])),
#                             L(c2,v(top=["name",2])),
#                             L(c2,v(top=["name",3])),
#                            ),
#                          RO(710,-60,
#                             L(f1,c1,v(top=["top_mem name",1])),
#                             L(f1,c1,v(top=["top_mem name",2])),
#                             L(f1,c1,v(top=["top_mem name",3])),
#                            ),
                    )
    c=kvp.get_code()

pyend ]]


-- vim: set ts=4 sw=4 noet ai cindent syntax=lua nowrap syntax=python :
