#!/usr/bin/env python3

import sys
#sys.path.insert(1,"/var/src/pylib")

WAITFILE="/tmp/wait_for_xserverrc"

from pylib.syslog_utils import warn,err,info,log,WARN,ERR,INFO,DEBUG,warn_exp,debug
from subprocess import DEVNULL,CalledProcessError,call as subprocess_call
from pylib.syslog_utils.subprocess import check_output,check_call,call,Popen
from time import time
from hashlib import md5
from os.path import expanduser,expandvars
from os import environ
from time import sleep
from os import get_terminal_size,stat
from sys import modules
#from pylib.du import dd
from pylib.xinit_utils import *
from socket import gethostname


def parse_args():
    from argparse import ArgumentParser
    a=ArgumentParser()
    a.add_argument('-D','--debug',action='store_true',default=False)
    a.add_argument('-v','--verbose',action='store_true',default=False)
    a.add_argument("--keyev", action='store_true', help="use keyev, not synergy",default=True)
    global args
    args=a.parse_args()
    if args.debug:
        args.verbose=True
    #if not args.debug:
    #    global stdout
    #    global stderr
    #    stdout=DEVNULL
    #    stderr=DEVNULL

def setup_keyboard(display):
    try:
        hostname = check_output(["hostname"],loglevel=DEBUG)
        hostname=hostname.decode().strip()
    except Exception as e:
        warn_exp(e)
        err("ERROR: could not get hostname")
        raise
    xkbmap_file_path=environ['HOME']+"/.xkbmap_"+hostname
    with open(xkbmap_file_path,'rb') as f:
        checksum = md5(f.read()).hexdigest()
    msg='setup keyboard for display='+display
    cmd=["xkbcomp", xkbmap_file_path, display ]
    call(cmd,msg=msg,loglevel=DEBUG)
    check_call(['xset', 'r', 'rate', '130', '50'],env=environ.update({"DISPLAY":display}),loglevel=DEBUG)
    return checksum

def gen_countdown_code(timeout):
    countdown_code = \
    """countdown(){
         for i in $(seq "${1}" -1 1); do
             echo -n " t = -${i} ";
             for j in $(seq 10); do
                 sleep 0.05;
                 echo -n .;
             done
             for j in $(seq 10); do
                 sleep 0.05;
                 tput dch 2;
             done
             tput el1;tput cr;
         done
         echo " >> zero << ";
    }
    echo -e "this terminal window \nwill self destruct..."
    countdown """+str(int(timeout))+""";"""
    return countdown_code

def _start_sd_terminal(timeout=600):
    pid=""
    starttime=time()
    while not len(pid) > 0 or (time() - starttime) > timeout:
        pid = check_output  (
                            [   
                                "ssh", "xsky", "env", "DISPLAY=:0",
                                "rind", "st", "-ttmpinittermwin",
                                "-f", '"Anonymous Pro:pixelsize=20:antialias=true:autohint=true"',
                                '-e', 'sh', '-c', "'"+gen_countdown_code(30)+"'"
                            ],
                            loglevel=DEBUG,
                            )
        sleep(2)
    pid=pid.decode().strip()
    info("started terminal pid="+pid)
    return int(pid)

def start_sd_terminal(timeout=180):
    info("starting self destructing terminal on xserver...")
    try:
        display_var_backup = environ['DISPLAY']
        environ.update({'DISPLAY':":0"})
        pid = _start_sd_terminal(timeout=timeout)
        info('waiting for terminal "'+str(pid)+'" ...')
        
        count=0
        while not call(['ssh', 'xsky', 'ps', '--no-headers', '-p', str(pid)],loglevel=DEBUG) == 0:
            sleep(1)
            count+=1
            if count in [1,2,3,5] or count%10==0:
                pid = _start_sd_terminal(timeout=timeout)
        debug("count="+str(count))
    finally:
        environ.update({'DISPLAY': display_var_backup })
        
    info('terminal done')

def setup_xrandr():
    call([ 'xrandr', '--dpi', '90', '--output', 'HDMI-1', '--rotate', 'left', '--pos', '0x0', '--primary' ],loglevel=DEBUG)
    call([ 'xrandr', '--output', 'VGA-1', '--mode', '1920x1080' ],loglevel=DEBUG)
    call([ 'xrandr', '--delmode', 'VGA-1', '1920x1080_'],stderr=DEVNULL,loglevel=DEBUG)
    call([ 'xrandr', '--rmmode', '1920x1080_'],stderr=DEVNULL,loglevel=DEBUG)
    #xrandr --newmode 1920x1080_ 148.500 1920 2007 2052 2204 1080 1084 1089 1125 +hsync +vsync
    call(
            [ 'xrandr', '--newmode', '1920x1080_', '148.86399999999999010924',
            '1920', '2007', '2052', '2204', '1080', '1084', '1089', '1125', '+hsync', '+vsync' 
            ],
            loglevel=DEBUG
        )
    call([ 'xrandr', '--addmode', 'VGA-1', '1920x1080_' ],loglevel=DEBUG)
    call([ 'xrandr', '--output', 'VGA-1', '--mode', '1920x1080_', '--rotate', 'left', '--pos', '768x0' ],loglevel=DEBUG)

def get_nodelist():
    with open("/etc/nodelist")  as f:
        nodes=f.read().split("\n")
    nodes=[node.strip() for node in nodes]
    while "" in nodes:
        nodes.pop(nodes.index(""))
    return nodes

if __name__=='__main__':
    info("####################################")
    info("##  xinit xinitrc skyscraper ...  ##")
    info("####################################")
    master_display=environ['DISPLAY']
    debug("master display = \"{}\"".format(master_display))
    popens=[]
    try:

        # xinit does not wait for xserver
        # need to wait here

        wait=True
        while wait:
            with open(WAITFILE) as f:
                st_mode=stat(WAITFILE).st_mode
                if st_mode & 0o0033 == 0:
                    # readonly for all but user
                    wait,starttime=eval(f.read())
                else:
                    raise Exception("ERROR: Wrong mode of waitfile \""+WAITFILE+"\", umask while calling xinit probably wrong.")
            sleep(0.2)

        parse_args()
        
        if not args.keyev:
            try:
                check_call(["synergy_skyscraper", "stop"],msg='stopping synergy',loglevel=DEBUG)
            except Exception as e:
                warn_exp(e)
            try:
                check_call(["synergy_skyscraper", "starts"],msg='starting synergy server',loglevel=DEBUG)
            except Exception as e:
                warn_exp(e)
        try: 
            checksum_0=setup_keyboard(environ['DISPLAY'])
        except CalledProcessError as e:
            ee=XinitError(e.msg)
            ee.log()

        environ.update({'DISPLAY':"skyscraper:0"})

        ########################
        ##  first get access  ##
        ########################
        start_sd_terminal()
        ownnode=gethostname()
        check_call(['ssh', 'xsky', 'env', 'DISPLAY=:0', 'xhost', '+'+ownnode],msg='setup xhost permission '+ownnode,loglevel=DEBUG)
        for node in get_nodelist():
            check_call(['ssh', 'xsky', 'env', 'DISPLAY=:0', 'xhost', '+'+node],msg='setup xhost permission '+node,loglevel=DEBUG)
        ####################################################################


        try:
            environ.update({'DISPLAY':"skyscraper:0"})
            checksum_1=setup_keyboard('skyscraper:0')
            if not checksum_0 == checksum_1:
                warn('WARNING: "xkb" keyboard setup probably incorrect !')

        except CalledProcessError as e:
            ee=XinitError(str(e))
            ee.log()
        
        # set up stuff
        #xrdb -merge ~/.Xresources
        
        call(['xset', '+fp', expandvars('$HOME/.local/share/fonts') ], msg='adding fontdir ... ' ,loglevel=DEBUG)

        setup_xrandr() 

        call([ 'xset', 'dpms', '600', '1200', '3600' ],msg='dpms setup',loglevel=DEBUG)
        #xcalib -a -c ;xcalib -a -blue 1 1 85 -green 1 1 94  -red 1 1 100
        
        # start stuff
        #info('starting pulseaudio ...')
        #popens.append(Popen(['pulseaudio' ,'-D']))
        #redshift -c ~/.redshift_skyscraper.conf &
        
        #popens.append(Popen([ 'clipster', '-d' ],msg='starting clipster ...'))
        
        #st -f $font &
        
        #sc -r &
        if not args.keyev:
            raise Exception("synergy is not supported any more")
        else:
            try:
                display_var_backup=environ['DISPLAY']
                environ.update({'DISPLAY':master_display})
                p=Popen([ 'keyev' ],msg='starting keyev',env=environ)
                popens.append(p)
                environ['DISPLAY']=display_var_backup
            except Exception as e:
                warn_exp(e)
            try:
                p=Popen([ 'mouseev' ],msg='starting mouseev')
                popens.append(p)
            except Exception as e:
                warn_exp(e)
        try: 
            p=Popen([ 'i3', '-c', expandvars('${HOME}/.config/i3/config_skyscraper:0') ],msg='starting i3 wm')
            info("time = "+str(round(time()-starttime,2)))
            p.wait()
        except Exception as e:
            retcode=p.poll()
            warn_exp(e)
            warn('i3 terminated, exitcode="'+str(p.poll())+'"')
            raise
    except Exception as e:
        warn_exp(e,with_traceback=True)
    finally:
        try:
            if not args.keyev:
                call([ 'wm_conf_adj', 'off'],msg="adjusting config for state: xserver_on_skyscraper = disabled",loglevel=DEBUG)
        except Exception as e:
            subprocess_call([ 'wm_conf_adj', 'off'],loglevel=DEBUG)
            warn_exp(e,with_traceback=True)

    
    # vim: set foldlevel=0 foldnestmax=2 foldmethod=indent :
